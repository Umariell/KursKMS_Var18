<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PSS</name>
    </assembly>
    <members>
        <member name="T:CommonModel.Kernel.ModelEventBaseClass">
            <summary>
            Абстрактный базовый класс для модельных событий. Наследовать пользовательские классы надо от его наследников.
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.ISimpleTraceable">
            <summary>
            Простейший интерфейс трассировки для немодельных событий.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.ISimpleTraceable.GetTrace(CommonModel.Kernel.TraceContext)">
            <summary>
            Получить строку трассировки для данного модельного объекта
            </summary>
            <param name="context">Контекст трассировки</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.ModelEventBaseClass.HandleEvent(CommonModel.Kernel.ModelEventArgs)">
            <summary>
            Обработчик события
            </summary>
            <param name="args">Параметры.</param>
        </member>
        <member name="M:CommonModel.Kernel.ModelEventBaseClass.RunHandleEvent(CommonModel.Kernel.ModelEventArgs)">
            <summary>
            Внутренний метод для вызова обработчика только внутри сборки.
            </summary>
            <param name="args">Параметры.</param>
        </member>
        <member name="M:CommonModel.Kernel.ModelEventBaseClass.#ctor(System.Double)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.Kernel.ModelEventBaseClass"/>.
            </summary>
            <param name="priority">Приоритет.</param>
        </member>
        <member name="M:CommonModel.Kernel.ModelEventBaseClass.CompareTo(CommonModel.Kernel.ModelEventBaseClass)">
            <summary>
            Сравнение c другим событием.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.ModelEventBaseClass.Compare(CommonModel.Kernel.ModelEventBaseClass,CommonModel.Kernel.ModelEventBaseClass)">
            <summary>
            Сравнение двух событий по умолчанию (сравнение приоритетов)
            </summary>
            <remarks>Переопределение приведет к изменению работы метода CompareTo() и методов используемых для сортировки списка событий</remarks>
        </member>
        <member name="M:CommonModel.Kernel.ModelEventBaseClass.PriorityCompare(CommonModel.Kernel.ModelEventBaseClass,CommonModel.Kernel.ModelEventBaseClass)">
            <summary>
            Сравнение двух событий по умолчанию (сравнение приоритетов). применяется для сортировки списков событий при обработке
            </summary>        
        </member>
        <member name="M:CommonModel.Kernel.ModelEventBaseClass.PriorityCompareDescending(CommonModel.Kernel.ModelEventBaseClass,CommonModel.Kernel.ModelEventBaseClass)">
            <summary>
            Сравнение двух событий по умолчанию (сравнение приоритетов). применяется для сортировки списков событий при обработке.
            По убыванию.
            </summary>        
        </member>
        <member name="M:CommonModel.Kernel.ModelEventBaseClass.GetTrace(CommonModel.Kernel.TraceContext)">
            <summary>
            Получить строку трассировки для данного модельного объекта
            </summary>
            <param name="context">Контекст трассировки</param>
            <returns>System.String.</returns>
        </member>
        <member name="E:CommonModel.Kernel.ModelEventBaseClass.PriorityChanged">
            <summary>
            Возникает при изменении приоритета события.
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelEventBaseClass.Priority">
            <summary>
            Приоритет события/процесса.
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.BaseTimeModelEvent">
            <summary>
            Базовый класс временнЫх событий. Для наследования используете <see cref="T:CommonModel.Kernel.TimeModelEvent`1"/>.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.BaseTimeModelEvent.#ctor">
            <summary>
            Базовый конструктор временного события <see cref="T:CommonModel.Kernel.BaseTimeModelEvent"/>.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.BaseTimeModelEvent.#ctor(System.Double)">
            <summary>
            Конструктор временного события  <see cref="T:CommonModel.Kernel.BaseTimeModelEvent"/> с заданием приоритета события.
            </summary>
            <param name="priority">приоритет</param>
        </member>
        <member name="T:CommonModel.Kernel.TimeModelEvent`1">
            <summary>
            Класс "Модельное событие". Класс абстрактный,
            необходим для создания пользовательских ВременнЫх событий для
            работы с СБС.
            </summary>
            <typeparam name="TUserModel">Класс модели, наследованный от <see cref="T:CommonModel.Kernel.Model"/></typeparam>
        </member>
        <member name="M:CommonModel.Kernel.TimeModelEvent`1.#ctor">
            <summary>
            Конструктор временного события по умолчанию <see cref="T:CommonModel.Kernel.TimeModelEvent`1"/>.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.TimeModelEvent`1.#ctor(System.Double)">
            <summary>
            Конструктор временного события с заданием приоритета <see cref="T:CommonModel.Kernel.TimeModelEvent`1"/>.
            </summary>
            <param name="priority">приоритет.</param>
        </member>
        <member name="P:CommonModel.Kernel.TimeModelEvent`1.Model">
            <summary>
            Модель, которой принадлежит событие.
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.BaseStructModelEvent">
            <summary>
            Базовый класс структурных событий. Для наследования используете <see cref="T:CommonModel.Kernel.StructModelEvent`1"/>.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.BaseStructModelEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonModel.Kernel.BaseStructModelEvent"/> class.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.BaseStructModelEvent.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonModel.Kernel.BaseStructModelEvent"/> class.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:CommonModel.Kernel.BaseStructModelEvent.InvokeEvent">
            <summary>
            Абстрактный метод, отвечающий на вопрос "Событие произошло?"
            </summary>
            <returns>true - структурное событие произошло.</returns>
        </member>
        <member name="M:CommonModel.Kernel.BaseStructModelEvent.GetTrace(CommonModel.Kernel.TraceContext)">
            <summary>
            Получить строку трассировки для данного модельного объекта
            </summary>
            <param name="context">Контекст трассировки</param>
            <returns>System.String.</returns>
        </member>
        <member name="E:CommonModel.Kernel.BaseStructModelEvent.MaxTimeChanged">
            <summary>
            Событие возникает при изменении максимальное время проверки свершения события <see cref="P:CommonModel.Kernel.BaseStructModelEvent.MaxDeltaTime"/>.
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.BaseStructModelEvent.MaxDeltaTime">
            <summary>
            Максимальное время проверки свершения события. по-умолчанию Double.MaxValue.
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.StructModelEvent`1">
            Класс "Модельное событие". Класс абстрактный, 
            необходим для создания пользовательских Структурных событий для
            работы с СБС.
        </member>
        <member name="M:CommonModel.Kernel.StructModelEvent`1.#ctor">
            <summary>
            Конструктор класса <see cref="T:CommonModel.Kernel.StructModelEvent`1"/>.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.StructModelEvent`1.#ctor(System.Double)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.Kernel.StructModelEvent`1"/>.
            </summary>
            <param name="priority">Приоритет</param>
        </member>
        <member name="P:CommonModel.Kernel.StructModelEvent`1.Model">
            <summary>
            Модель, которой принадлежит структурное событие.
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.ModelEventArgs">
            <summary>
            Структура данных для хранения записей в СБС
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.ModelEventArgs.GetClone">
            <summary>
            Получить копию экземпляра класса.
            </summary>
            <returns>Возвращает копию экземпляра класса.</returns>
        </member>
        <member name="M:CommonModel.Kernel.ModelEventArgs.GetTrace(CommonModel.Kernel.TraceContext)">
            <summary>
            Получить строку трассировки для данного модельного объекта
            </summary>
            <param name="context">Контекст трассировки</param>
            <returns>строку трассировки.</returns>
        </member>
        <member name="P:CommonModel.Kernel.ModelEventArgs.argsID">
            <summary>
            Порядковый номер записи (номер занесения записи в СБС - задается в классе SBS при добавлении записи(планировании события))
            </summary>
            <value>The args ID.</value>
        </member>
        <member name="P:CommonModel.Kernel.ModelEventArgs.Model">
            <summary>
            Модель в которой запланировано событие
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelEventArgs.PlanningModel">
            <summary>
            Модель, которая запланировала событие
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelEventArgs.Time">
            <summary>
            Модельное время, на которое запланировано событие.
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelEventArgs.PlanningTime">
            <summary>
            Модельное время планирования события.
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelEventArgs.DeltaTime">
            <summary>
            Разница между текущим модельным временем и временем планирования события
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelEventArgs.Event">
            <summary>
            Указатель на временное событие
            </summary>
            <remarks>если null - то запланирован пересчет.</remarks>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.BaseHistogram">
            <summary>
            Базовый абстрактный класс для модельных гистограмм.
            </summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.BasicStatCollector`1">
            <summary>
            Базовый (родительский) класс "Сборщик статистики". Реализует базовую функуциональность.<para/>
            Для создания собственного сборщика лучше использовать однин из его наследников: SimpleStatCollector или HardStatCollector
            </summary>
            <typeparam name="TVar">Один из базовых типов C#, по переменной которого необходимо собирать статиттику.</typeparam>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.StatCollector">
            <summary>
            Базовый не generic класс всех сборщиков, введен в основном для упрощения работы с коллекцией сборщиков модели
            <remarks>Для наследования используйте generic класс BasicStatCollector</remarks>
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.ModelObject">
            <summary>
            Родительский класс всех объектов модели
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.ITraceable">
            <summary>
            Интерфейс, говорящий о том что класс, которые его реализует трассируем.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.ITraceable.GetTrace">
            <summary>
            Трассировать данный объект
            </summary>
            <remarks>
            Данные метод использует контекст по умолчанию
            </remarks>
        </member>
        <member name="M:CommonModel.Kernel.ModelObject.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonModel.Kernel.ModelObject"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:CommonModel.Kernel.ModelObject.GetTrace(CommonModel.Kernel.TraceContext)">
            <summary>
            Получить строку трассировки для данного модельного объекта
            </summary>
            <param name="context">Контекст трассировки</param>
            <returns></returns>
            <remarks>Методы Trace используют этот метод для получения строки трассировки</remarks>
        </member>
        <member name="M:CommonModel.Kernel.ModelObject.CompareTo(CommonModel.Kernel.ModelObject)">
            <summary>
            Compares the current object with another object of the same type.
            Для переопределения достаточно переопределить метод Compare в наследнике.
            </summary>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CommonModel.Kernel.ModelObject.Compare(CommonModel.Kernel.ModelObject,CommonModel.Kernel.ModelObject)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            Сравнение производится по ID полям.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.ModelObject.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:CommonModel.Kernel.ModelObject.Name">
            <summary>
            Название модельного объекта
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelObject.ID">
            <summary>
            ID модели
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelObject.ModelRef">
            <summary>
            Указатель на модель, которой принадлежит модельный объект
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.StatCollector.ResetCollector">
            <summary>
            Обнуление сборщика статистики. В данном класса не определен(здесь нечего обнулять)
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.StatCollector.LastTimeOfChanging">
            <summary>Время последнего изменения переменной</summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.StatCollector.Iteration">
            <summary>Номер итерации (изменения значения переменной)</summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BasicStatCollector`1.Process(`0,`0,CommonModel.Kernel.IModelInstance)">
            <summary>
            Метод <c>Process(...)</c> является базовым обработчиком событий, генерируемых<para/>
            переменными, реализующими интерфейс ICollectableVar.
            </summary>
            <param name="currentValue">Текущее(старое) значение переменной, по которой собирается статистика</param>
            <param name="newValue">Новое значение переменной, по которой собирается статистика</param>
            <param name="model">Модель, основное предназначение которой - поставлять текщее <para/> модельное время.
            Объект, передаваемый как модель, должен реализовывать IModelInstance</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BasicStatCollector`1.ConnectOnSet``1(``0)">
            <summary>Метод <c>ConnectOnSet</c> привязывает сборщик статистики к переменной,<para/>
            реализующий интерфейс <c>ICollectableVar</c>
            <para/>Сборщик подписывается на событие переменной OnSet</summary>
            <param name="target">Переменная, по которой собирается статистика</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BasicStatCollector`1.ConnectOnChange``1(``0)">
            <summary>Метод <c>ConnectOnChange</c> привязывает сборщик статистики к переменной,<para/>
            реализующий интерфейс <c>ICollectableVar</c>
            <para/>Сборщик подписывается на событие переменной OnChange</summary>
            <param name="target">Переменная, по которой собирается статистика</param>        
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BasicStatCollector`1.LastValue">
            <summary>Последнее обработанное значение переменной, (по которой собирается статистика)</summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetBarNumber(System.Double)">
            <summary>
            По значению реализации возвращает номер столбца.
            </summary>
            <param name="value">Значение реализации</param>
            <returns>номер столбца</returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.#ctor(CommonModel.Kernel.IModelInstance,System.String)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.BaseHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
            <param name="histName">Наименование гистограммы</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.BaseHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetLeft(System.Int32)">
            <summary>
            Левая граница столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetRight(System.Int32)">
            <summary>
            Правая граница столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetFrequency(System.Int32)">
            <summary>
            Частота попадания в столбец
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetColumnI(System.Int32)">
            <summary>
            Ненормированная высота столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetColumnWidth(System.Int32)">
            <summary>
            Ширина столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetF(System.Double)">
            <summary>
            Ступенчатые функции
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetFSum(System.Double)">
            <summary>
            гистограммы
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetColumn(System.Int32)">
            <summary>
            Высота столбца для ступенчатой функции
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetColumnSum(System.Int32)">
            <summary>
            ***Высота слева до данного столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetColumnSumI(System.Int32)">
            <summary>
            Сумма ненормированных столбцов слева и до данного
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BaseHistogram.GetEnumerator">
            <summary>
            Реализация интерфейса IEnumerable (чтобы можно было проходить по всем столбцам гистограммы)
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BaseHistogram.Count">
            <summary>
            Получить число реализаций
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BaseHistogram.Min">
            <summary>
            Получить минимум реализаций
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BaseHistogram.Max">
            <summary>
            Получить максимум реализаций
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BaseHistogram.ColumnsCount">
            <summary>
            Получить число столбцов
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BaseHistogram.LeftCount">
            <summary>
            Число реализаций, не попавших слева
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BaseHistogram.RightCount">
            <summary>
            Число реализаций, не попавших справа
            </summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.CollectorUtils">
            <summary>Класс содержит вспомогательные методы (в том числе и методы расширения) для работы со сборщиками статистики</summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.CollectorUtils.InitAndConnectCollectors``2(CommonModel.StatisticsCollecting.TModelVar{``0}[],``1[]@,System.Boolean,System.String)">
            <summary>Проинициализировать массив сборщиков и привязать его к массиву переменных (каждый сборщик к каждой переменной)</summary>
            <typeparam name="T">Базовый тип модельной переменной (int, double, ets.)</typeparam>
            <typeparam name="T2"> Тип сборщика статистики</typeparam>
            <param name="vars">Проинициализированный массив проинициализированных переменных</param>
            <param name="collectorsArray">объявленные, но непроинициализированный массив переменных</param>
            <param name="onSet">true - привязать к событию onSet, false - onChange</param>
            <param name="collectorPrefix">Префикс имени сборщиков статистики</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.CollectorUtils.InitAndConnectCollectors``2(CommonModel.StatisticsCollecting.TModelVar{``0}[],System.Boolean,System.String)">
            <summary>Проинициализировать массив сборщиков и привязать его к массиву переменных (каждый сборщик к каждой переменной)</summary>
            <typeparam name="T">Базовый тип модельной переменной (int, double, ets.)</typeparam>
            <typeparam name="T2"> Тип сборщика статистики</typeparam>
            <param name="vars">Проинициализированный массив проинициализированных переменных</param>
            <param name="onSet">true - привязать к событию onSet, false - onChange</param>
            <param name="collectorPrefix">Префикс имени сборщиков статистики</param>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.IntervalMean">
            <summary>
            Класс сборщик интервального матожидания
            </summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.HardStatCollector`1">
            <summary>
            Класс, собирающий "сложную" статистику.
            (при сборке ПРОИЗВОДЯТСЯ математических преобразований величины 
            и возвращаемая статистика Не совпадает(double) с типом переменной)
            </summary>
            <typeparam name="TVar">Один из базовых классов C#.</typeparam>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.IntervalMean.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.IntervalMean"/>.
            </summary>
            <param name="model">Модель, которой принадлежит сборщик</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.IntervalMean.Process(System.Double,System.Double,CommonModel.Kernel.IModelInstance)">
            <summary>
            Обработка события изменения объекта, по которому идет сбор статистики
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.IntervalMean.ResetCollector">
            <summary>
            Обнуление сборщика статистики
            </summary>
        </member>
        <member name="T:CommonModel.Collections.ModelList`1">
            <summary>
            Модельный класс-коллекция "Список" схожий по функциональности с System.Collections.Generic.List
            </summary>
        </member>
        <member name="T:CommonModel.Collections.BaseModelCollection`1">
            <summary>
            Базовый класс модельных коллекций.
            </summary>
        </member>
        <member name="M:CommonModel.Collections.BaseModelCollection`1.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализация объекта класса BaseModelCollection />.
            </summary>
            <param name="model">Модель.</param>
        </member>
        <member name="M:CommonModel.Collections.BaseModelCollection`1.#ctor(CommonModel.Kernel.IModelInstance,System.String)">
            <summary>
            Инициализация объекта класса BaseModelCollection />.
            </summary>
            <param name="model">Модель.</param>
            <param name="name">Имя Коллекции.</param>
        </member>
        <member name="M:CommonModel.Collections.BaseModelCollection`1.invokeChangedEvent(System.Object,CommonModel.Collections.CollectionEventArgs)">
            <summary>
            Инициировать событие изменение состояния коллекции.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:CommonModel.Collections.CollectionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CommonModel.Collections.BaseModelCollection`1.Count">
            <summary>
            Число элементов в коллекции
            </summary>
        </member>
        <member name="E:CommonModel.Collections.BaseModelCollection`1.OnModelCollectionChanged">
            <summary>
            Событие возникает при изменении состояния модельной коллекции.
            </summary>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.Collections.ModelList`1"/>.
            </summary>
            <param name="model">Модель.</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.#ctor(CommonModel.Kernel.IModelInstance,System.String)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.Collections.ModelList`1"/>.
            </summary>
            <param name="model">Модель.</param>
            <param name="name">Имя Коллекции.</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.#ctor(CommonModel.Kernel.IModelInstance,System.String,System.Int32)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.Collections.ModelList`1"/>.
            </summary>
            <param name="model">Модель</param>
            <param name="name">Имя списка</param>
            <param name="capacity">Начальная емкость списка</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.#ctor(CommonModel.Kernel.IModelInstance,System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.Collections.ModelList`1"/>.
            </summary>
            <param name="model">Модель</param>
            <param name="name">Имя списка</param>
            <param name="collection">Перечислимая коллекция которой можно инициализировать список</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.Add(`0)">
            <summary>
            Добавить элемент в конец списка
            </summary>
            <param name="item">Добавляемый элемент.</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.Insert(System.Int32,`0)">
            <summary>
            Вставить элемент в список по индексу.
            </summary>
            <param name="index">индекс</param>
            <param name="item">элемент.</param>
            <exception cref="T:System.ArgumentException">Некорретные аргументы при вставке в модельный список:</exception>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.RemoveAt(System.Int32)">
            <summary>
            Удалить элемент с указанным индексом
            </summary>
            <param name="index">индекс</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.Remove(`0)">
            <summary>
            Удалить укзанный элемент.
            </summary>
            <param name="item">Элемент.</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.Pop">
            <summary>
            Аналогично методу в стэке (получить первый элемент из списка и удалить его)
            </summary>
            <returns>Первый элемент в списке</returns>
            <exception cref="T:System.Exception">Не удалось изъять из списка 1-ый элемент:</exception>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Добавить серию(коллекцию) элементов.
            </summary>
            <param name="collection">Коллекция</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            удалить  элементы.
            </summary>
            <param name="match">признак удаления</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.Clear">
            <summary>
            Очистить список.
            </summary>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Удаляет из списка "количество" элементов начиная с "индекса"
            </summary>
            <param name="index">Индекс первого элемента</param>
            <param name="count">Количество элементов после первого.</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.Sort">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List using
            the default comparer.
            </summary>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List using
                the specified System.Comparison.
            </summary>
            <param name="comparison">The System.Comparison to use when comparing elements.</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List using
            the specified comparer.
            </summary>
            <param name="comparer">The System.Collections.Generic.IComparer implementation to use when comparing
               elements, or null to use the default comparer System.Collections.Generic.Comparer.Default.</param>
        </member>
        <member name="M:CommonModel.Collections.ModelList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in System.Collections.Generic.List
               using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The System.Collections.Generic.IComparer implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer .Default.</param>
        </member>
        <member name="P:CommonModel.Collections.ModelList`1.Item(System.Int32)">
            <summary>
            Получение или установка символа на определенной позиции.
            index может быть отрицательным (в этом случае отсчет с обратной стороны массива)
            </summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.TIntVar">
            <summary>
            Модельная переменная, инкапсулирующая логическую переменную класса int.
            </summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.TModelVar`1">
            <summary>
            Модельная переменная, доступная как на запись так и на считывание. Основная задача - сбор статистики по переменной класса TVarType
            </summary>
            <typeparam name="TVarType">Класс "базовой" переменной(например int,double...), для которой создается модельная "оболочка".</typeparam>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1">
            <summary>
            Модельная переменная, доступная только для считывания. Основная задача - сбор статистики по переменной класса TVarType
            </summary>
            <typeparam name="TVarType">Класс "базовой" переменной(например int,double...), для которой создается модельная "оболочка".</typeparam>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.TModelBaseVar">
            <summary>
            Базовый класс всех модельных переменных. Пользовательские классы надо наследовать от TModelReadOnlyVar
            </summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.ICollectableVar`1">
            <summary>
            Интерфейс описывает способность класса генерировать события для сборки статистики.
            </summary>
            <typeparam name="TVarType">Тип "БАЗОВОЙ" переменной по которой идет сбор статистики. Например: int,double...,  а НЕ: TIntVar,TRealVar...)</typeparam>
        </member>
        <member name="E:CommonModel.StatisticsCollecting.ICollectableVar`1.OnSet">
            <summary>
            Событие возникает при каждом присвоении переменной, по которой идет сбор статистики, нового значения.
            </summary>
        </member>
        <member name="E:CommonModel.StatisticsCollecting.ICollectableVar`1.OnChange">
            <summary>
            Событие возникает при присвоении переменной, по которой идет сбор статистики, нового значения ОТЛИЧНОГО от предыдущего.
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1"/>.
            </summary>
            <param name="model">Модель, которой принадлежит переменная.</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1.AddCollectors_OnSet(CommonModel.StatisticsCollecting.BasicStatCollector{`0}[])">
            <summary>
            Подписать произвольное число сборщиков статистики к событию OnSet переменной.
            </summary>
            <param name="colls">Сборщики статистики.</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1.AddCollectorsOnChange(CommonModel.StatisticsCollecting.BasicStatCollector{`0}[])">
            <summary>
            Подписать произвольное число сборщиков статистики к событию OnChange переменной.
            </summary>
            <param name="colls">Сборщики статистики.</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1.RemoveCollectorsOnSet(CommonModel.StatisticsCollecting.BasicStatCollector{`0}[])">
            <summary>
            Удалить подписку сборщиков статистики на событие OnSet переменной.
            </summary>
            <param name="colls">Сборщики статистики.</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1.RemoveCollectorsOnChange(CommonModel.StatisticsCollecting.BasicStatCollector{`0}[])">
            <summary>
            Удалить подписку сборщиков статистики на событие OnChange переменной.
            </summary>
            <param name="colls">Сборщики статистики.</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1.GetTrace(CommonModel.Kernel.TraceContext)">
            <summary>
            Получить строку трассировки для данного модельного объекта
            </summary>
            <param name="context">Контекст трассировки</param>
            <returns></returns>
        </member>
        <member name="E:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1.OnSet">
            <summary>
            Событие возникает при каждом присвоении переменной, по которой идет сбор статистики, нового значения.
            </summary>
        </member>
        <member name="E:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1.OnChange">
            <summary>
            Событие возникает при присвоении переменной, по которой идет сбор статистики, нового значения ОТЛИЧНОГО от предыдущего.
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.TModelReadOnlyVar`1.Value">
            <summary>
            Свойство, обеспечивающее доступ к переменной, по которой собирается статистика.
            </summary>
            <value>
            Новое значение.
            </value>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.TModelVar`1.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класс <see cref="T:CommonModel.StatisticsCollecting.TModelVar`1"/>.
            </summary>
            <param name="model">Модель, которой принадлежит переменная.</param>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.TModelVar`1.Value">
            <summary>
            Свойство, обеспечивающее доступ к переменной, по которой собирается статистика.
            </summary>
            <value>
            Новое значение.
            </value>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.TIntVar.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.TIntVar"/>.
            </summary>
            <param name="model">Модель, которой принадлежит переменная.</param>
        </member>
        <member name="T:CommonModel.Kernel.TraceHelper">
            <summary>Вспомогательный класс для автоматизированной трасировки</summary>
        </member>
        <member name="M:CommonModel.Kernel.TraceHelper.AddMonitoringModel(CommonModel.Kernel.Model)">
            <summary>Метод подписывается на все доступные события модели соответствующими методами обработки</summary>
        </member>
        <member name="M:CommonModel.Kernel.TraceHelper.AddMonitoringVar``1(CommonModel.StatisticsCollecting.TModelReadOnlyVar{``0},System.Boolean)">
            <summary>
            Подписка на событие переменной 
            </summary>
            <typeparam name="TVar">Тип базового класса, на котором базируется модельная переменная</typeparam>
            <param name="variable">переменная, на чье событие подписывается метод</param>
            <param name="change">True - подписка на событие OnChange, false на OnSet</param>
        </member>
        <member name="M:CommonModel.Kernel.TraceHelper.AddMonitoringRandStream``1(CommonModel.RandomStreamProducing.AbstractRandomStream{``0},System.Boolean)">
            <summary>
            Подписка на событие генератора ПСВ 
            </summary>
            <typeparam name="TVar">Тип базового класса, на котором базируется генератор</typeparam>
            <param name="generator">генератор, на чье событие подписывается метод</param>
            <param name="change">True - подписка на событие OnChange, false на OnSet</param>
        </member>
        <member name="M:CommonModel.Kernel.TraceHelper.AddMonitoringCollection``1(CommonModel.Collections.BaseModelCollection{``0})">
            <summary>Подписка на события модельной коллекции.</summary>
            <typeparam name="TVar">The type of the T var.</typeparam>
            <param name="collection">Модельная коллекция</param>
        </member>
        <member name="M:CommonModel.Kernel.TraceHelper.DisposeWriter">
            <summary>Вызвать Dispose для выходного потока</summary>
        </member>
        <member name="M:CommonModel.Kernel.TraceHelper.TraceOut(System.String,System.Double)">
            <summary>Вывести текст в трассировку</summary>
            <param name="text">текст для трассировки</param>
            <param name="level">уровень трассировки</param>
        </member>
        <member name="M:CommonModel.Kernel.TraceHelper.TraceOut(System.String,System.Double,System.Boolean)">
            <summary>
            Вывести текст в трассировку
            </summary>
            <param name="text">текст для трассировки</param>
            <param name="level">уровень трассировки</param>
            <param name="ignoreTabsBefore">true - в данном выводе игнорироть параметры атотабуляции</param>
        </member>
        <member name="M:CommonModel.Kernel.TraceHelper._traceText(System.String,System.Double)">
            <summary> Основной метод производящий вывод информации</summary>
            <param name="text">The text.</param>
            <param name="level">The level.</param>
        </member>
        <member name="P:CommonModel.Kernel.TraceHelper.CurrentLevel">
            <summary>Текущий уровень трассировки. по умолчнаию 0, коссвеный доступ к свойству Context</summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceHelper.Context">
            <summary>Контекст трассировки</summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceHelper.Destination">
            <summary>Назначение трассировки, по умолчанию Консоль. При задании трассировки в файл необходимо указать имя файла</summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceHelper.TraceFileName">
            <summary>Путь к выходному файлу трассировки, не используется если задан OutStream, см также Append</summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceHelper.OutStream">
            <summary>Вызодной поток, используется для вывода в файл трассировки.</summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceHelper.Append">
            <summary>true - Добавлять в файл, false - перезаписать, по умолчанию false</summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceHelper.TabsBefore">
            <summary>Количество симоволов табуляции перед текстом</summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceHelper.UseDefTab">
            <summary>true - использовать TabsBefore, false - не исползовать</summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceHelper.UseTabForAllRows">
            <summary>true - использовать TabsBefore для всех строк("\n") добавляемой строки (используется только с UseDefTab), по умолчанию True</summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.FixWHistogram">
            <summary>
            Гистограмма с фиксированными пределами и взвешенная по времени
            </summary>
            <remarks>Высота каждого столбца определяется как отношение к полному времени</remarks>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.FixHistogram">
            <summary>
            Гистограмм с фиксированными пределами
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.#ctor(CommonModel.Kernel.IModelInstance,System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.FixHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
            <param name="histName">Название гистограммы (можно null)</param>
            <param name="lBound">Левая граница гистограммы</param>
            <param name="rBound">Правая граница гистограммы</param>
            <param name="barCount">Число столбцов гистограммы</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.FixHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.SetParams(System.Double,System.Double,System.Int32)">
            <summary>
            Задает параметры гистограммы.
            </summary>
            <param name="lBound">Левая граница гистограммы</param>
            <param name="rBound">Tправая граница гистограммы</param>
            <param name="barCount">Число столбцов гистограммы</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.GetParams(System.Double@,System.Double@,System.Int32@)">
            <summary>
            Возвращает параметры гистограммы.
            </summary>
            <param name="lBound">Левая граница гистограммы</param>
            <param name="rBound">Tправая граница гистограммы</param>
            <param name="barCount">Число столбцов гистограммы</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.UpdateMaxMin(System.Double)">
            <summary>
            Обновление статистики по максимальному и минимальному элементам
            </summary>
            <param name="value">добавленное значение переменной по которой собирается статистика</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.Process(System.Double,System.Double,CommonModel.Kernel.IModelInstance)">
            <summary>
            Processes the specified current value.
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.GetBarNumber(System.Double)">
            <summary>
            По значению реализации возвращает номер столбца.
            </summary>
            <param name="value">Значение реализации</param>
            <returns>
            номер столбца
            </returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.GetLeft(System.Int32)">
            <summary>
            Левая граница столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.GetRight(System.Int32)">
            <summary>
            Правая граница столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.GetFrequency(System.Int32)">
            <summary>
            Частота попадания в столбец
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.GetColumnI(System.Int32)">
            <summary>
            Ненормированная высота столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.GetColumnWidth(System.Int32)">
            <summary>
            Ширина столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.GetF(System.Double)">
            <summary>
            Ступенчатые функции
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.GetFSum(System.Double)">
            <summary>
            гистограммы
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixHistogram.ResetCollector">
            <summary>
            Обнуление сборщика (гистограммы)
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.FixHistogram.LeftBound">
            <summary>
            Левая граница гистограммы
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.FixHistogram.RightBound">
            <summary>
            Праввая граница гистограммы
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.FixHistogram.dx">
            <summary>
            Ширина столбца гистограммы (доступно только на считывание, зависит от границ и числа столбцов)
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixWHistogram.#ctor(CommonModel.Kernel.IModelInstance,System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.FixWHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
            <param name="histName">Название гистограммы (можно null)</param>
            <param name="lBound">Левая граница гистограммы</param>
            <param name="rBound">Правая граница гистограммы</param>
            <param name="barCount">Число столбцов гистограммы</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixWHistogram.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.FixWHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixWHistogram.GetFrequency(System.Int32)">
            <summary>
            Частота попадания в столбец
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixWHistogram.GetColumnI(System.Int32)">
            <summary>
            Ненормированная высота столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixWHistogram.ResetCollector">
            <summary>
            Обнуление сборщика (гистограммы)
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.FixWHistogram.Process(System.Double,System.Double,CommonModel.Kernel.IModelInstance)">
            <summary>
            Processes the specified current value.
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <param name="model">The model.</param>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.IntervalVariance">
            <summary>
            Класс собирающий интервальную дисперсию
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.IntervalVariance.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.IntervalVariance"/>.
            </summary>
            <param name="model">Модель, которой принадлежит сборщик</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.IntervalVariance.Process(System.Double,System.Double,CommonModel.Kernel.IModelInstance)">
            <summary>
            Обработка события изменения объекта, по которому идет сбор статистики
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.IntervalVariance.ResetCollector">
            <summary>
            Обнуление сборщика статистики
            </summary>
        </member>
        <member name="T:CommonModel.RandomStreamProducing.AbstractRandomStream`1">
            <summary>
            Родительский класс для всех "конечных"(равномерное, экспоненциальное...) генераторов потоков случайных чисел. Чтобы определить свой генератор, необходимо унаследовать свой класс от этого.
            </summary>
            <typeparam name="TVar">Тип генерируемой величины.</typeparam>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.AbstractRandomStream`1.GenerateValue">
            <summary>
            Сгенерировать новое значение.
            </summary>
            <returns>Сгенерированное значение.</returns>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.AbstractRandomStream`1.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.AbstractRandomStream`1"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.AbstractRandomStream`1.#ctor(CommonModel.Kernel.IModelInstance,CommonModel.RandomStreamProducing.AbstractBaseRandomStream)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.AbstractRandomStream`1"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="bpn">Генератор БПЧ, на основе которого работает данный "конечный" генератор.</param>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.AbstractRandomStream`1.BPN">
            <summary>
            Свойство устанавливает и возварщает генератор БПЧ, используемый для данного "конечного" генератора.
            </summary>
        </member>
        <member name="T:CommonModel.RandomStreamProducing.UniformStream">
            <summary>
            Генератор потока равномерно распределенных величин.
            </summary>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.UniformStream.#ctor(CommonModel.Kernel.IModelInstance,System.Double,System.Double)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.UniformStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="a">Нижняя граница, генерируемой величины.</param>
            <param name="b">Верхняя граница, генерируемой величины.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.UniformStream.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.UniformStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.UniformStream.#ctor(CommonModel.Kernel.IModelInstance,System.Int32,System.Double,System.Double)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.UniformStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="bpnSeed">Ядро генератора БПЧ.</param>
            <param name="a">Нижняя граница, генерируемой величины.</param>
            <param name="b">Верхняя граница, генерируемой величины.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.UniformStream.#ctor(CommonModel.Kernel.IModelInstance,CommonModel.RandomStreamProducing.AbstractBaseRandomStream,System.Int32,System.Int32)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.UniformStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="bpn">Генератор БПЧ, на основе которого работает данный "конечный" генератор.</param>
            <param name="a">Нижняя граница, генерируемой величины.</param>
            <param name="b">Верхняя граница, генерируемой величины.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.UniformStream.GenerateValue">
            <summary>
            Сгенерировать новое значение.
            </summary>
            <returns>Сгенерированное значение.</returns>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.UniformStream.SetParameters(System.Double,System.Double)">
            <summary>
            Задать параметры потока.
            </summary>
            <param name="a">Нижняя граница, генерируемой величины.</param>
            <param name="b">Верхняя граница, генерируемой величины. </param>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.UniformStream.A">
            <summary>
            Нижняя граница величины распределения.
            </summary>
            <value>
            Новое значение нижней границы величины распределения.
            </value>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.UniformStream.B">
            <summary>
            Верхняя граница величины распределения.
            </summary>
            <value>
            Новое значение верхней границы величины распределения.
            </value>
        </member>
        <member name="T:CommonModel.RandomStreamProducing.ExpStream">
            <summary>
            Генератор потока экспоненциально распределенных величин.
            </summary>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.ExpStream.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.ExpStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.ExpStream.#ctor(CommonModel.Kernel.IModelInstance,System.Double)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.ExpStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="lyambda">Параметр экспоненциального распределения.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.ExpStream.#ctor(CommonModel.Kernel.IModelInstance,System.Int32,System.Double)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.ExpStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="bpnSeed">Ядро генератора БПЧ.</param>
            <param name="lyambda">Параметр экспоненциального распределения.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.ExpStream.#ctor(CommonModel.Kernel.IModelInstance,CommonModel.RandomStreamProducing.AbstractBaseRandomStream,System.Double)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.ExpStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="bpn">Генератор БПЧ, на основе которого работает данный "конечный" генератор.</param>
            <param name="lyambda">Параметр экспоненциального распределения.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.ExpStream.GenerateValue">
            <summary>
            Сгенерировать новое значение.
            </summary>
            <returns>Сгенерированное значение.</returns>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.ExpStream.Lyambda">
            <summary>
            Единственный параметр распределения lyambda.
            </summary>
            <value>
            Параметр lymda>0;
            </value>
            <remarks>
            В теории параметр должен быть строго больше нуля. Данная библиотека относится к этому ограничению более лояльно. Присвоенное свойству значение берется по модулю. Но значение должно быть строго больше нуля.
            </remarks>
        </member>
        <member name="T:CommonModel.RandomStreamProducing.NormalStream">
            <summary>
            Генератор потока нормально распределенных величин.
            </summary>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.NormalStream.#ctor(CommonModel.Kernel.IModelInstance,System.Double,System.Double)">
            <summary>
            Инициализация объекта класса <see cref="T:CommonModel.RandomStreamProducing.NormalStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="mx">Математическое ожидание генерируемой величины.</param>
            <param name="sigma">Среднеквадратичное отклонение генерируемой величины.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.NormalStream.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализация объекта класса <see cref="T:CommonModel.RandomStreamProducing.NormalStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.NormalStream.#ctor(CommonModel.Kernel.IModelInstance,System.Int32,System.Double,System.Double)">
            <summary>
            Инициализация объекта класса <see cref="T:CommonModel.RandomStreamProducing.NormalStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="bpnSeed">Ядро генератора БПЧ.</param>
            <param name="mx">Математическое ожидание генерируемой величины.</param>
            <param name="sigma">Среднеквадратичное отклонение генерируемой величины.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.NormalStream.#ctor(CommonModel.Kernel.IModelInstance,CommonModel.RandomStreamProducing.AbstractBaseRandomStream,System.Double,System.Double)">
            <summary>
            Инициализация объекта класса <see cref="T:CommonModel.RandomStreamProducing.NormalStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="bpn">Генератор БПЧ, на основе которого работает данный "конечный" генератор.</param>
            <param name="mx">Математическое ожидание генерируемой величины.</param>
            <param name="sigma">Среднеквадратичное отклонение генерируемой величины.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.NormalStream.GenerateValue">
            <summary>
            Сгенерировать новое значение.
            </summary>
            <returns>Сгенерированное значение.</returns>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.NormalStream.SetParameters(System.Double,System.Double)">
            <summary>
            Задать параметры потока.
            </summary>
            <param name="mx">Математическое ожидание генерируемой величины.</param>
            <param name="sigma">Среднеквадратичное отклонение генерируемой величины.</param>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.NormalStream.Mx">
            <summary>
            Математическое ожидание генерируемой величины.
            </summary>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.NormalStream.Sigma">
            <summary>
            Среднеквадратичное отклонение генерируемой величины.
            </summary>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.BoxMullerNormalStream.GenerateValue">
            <summary>
            Сгенерировать новое значение.
            </summary>
            <returns>
            Сгенерированное значение.
            </returns>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.BoxMullerNormalStream.BPN2">
            <summary>
            Свойство устанавливает и возварщает генератор БПЧ2, используемый для данного "конечного" генератора. Для генерации нормально распределенной величины методом Бокса-Мюллера необходимо 2 некоррелированных БПЧ.
            </summary>
        </member>
        <member name="T:CommonModel.RandomStreamProducing.DiscreteStream`1">
            <summary>
            Генератор потока дискретно распределенной величины. Также возможно использовать данный класс для генерации случайных событий(если в качестве TVar задать enum).
            </summary>
            <typeparam name="TVar">Tип генерируемой величины.</typeparam>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.DiscreteStream`1.#ctor(CommonModel.Kernel.IModelInstance,System.Collections.Generic.Dictionary{`0,System.Double})">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.DiscreteStream`1"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="table">Таблица, содержащая пары: величина - вероятность. (суммарная вероятность не обязательно должна равняться 1, таблица нормализуется автоматически)</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.DiscreteStream`1.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.DiscreteStream`1"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.DiscreteStream`1.#ctor(CommonModel.Kernel.IModelInstance,System.Int32,System.Collections.Generic.Dictionary{`0,System.Double})">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.DiscreteStream`1"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="bpnSeed">Ядро генератора БПЧ.</param>
            <param name="table">Таблица, содержащая пары: величина - вероятность. (суммарная вероятность не обязательно должна равняться 1, таблица нормализуется автоматически)</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.DiscreteStream`1.#ctor(CommonModel.Kernel.IModelInstance,CommonModel.RandomStreamProducing.AbstractBaseRandomStream,System.Collections.Generic.Dictionary{`0,System.Double})">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.DiscreteStream`1"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="bpn">Генератор БПЧ, на основе которого работает данный "конечный" генератор.</param>
            <param name="table">Таблица, содержащая пары: величина - вероятность. (суммарная вероятность не обязательно должна равняться 1, таблица нормализуется автоматически)</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.DiscreteStream`1.#ctor(CommonModel.Kernel.IModelInstance,System.Object[])">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.DiscreteStream`1"/>. При этом пользователь должен не ошибиться при вводе пар величина - вероятность, так как ошибка обнаружится только на стадии исполнения.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="rawTable">Четное число параметров: TVar,double,TVar,double,(величина, вероятность).</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.DiscreteStream`1.GenerateValue">
            <summary>
            Сгенерировать новое значение.
            </summary>
            <returns>Сгенерированное значение.</returns>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.DiscreteStream`1.NormalizeTable">
            <summary>
            Нормировка таблицы вероятностей.
            </summary>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.DiscreteStream`1.Table">
            <summary>
            Таблица вероятностей.
            </summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.TRealVar">
            <summary>
            Модельная переменная, инкапсулирующая логическую переменную класса double.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.ModelProcess.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор <see cref="T:CommonModel.Kernel.ModelProcess"/>.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.ModelProcess.InvokeEvent">
            <summary>
            Абстрактный метод, отвечающий на вопрос "Событие произошло?"
            </summary>
        </member>
        <member name="T:CommonModel.Collections.QueueRecord">
            <summary>Базовый класс элемента коллекции</summary>
        </member>
        <member name="M:CommonModel.Collections.QueueRecord.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>Конструктор элемента коллекции. Инициализирует ID элемента и время входа элемента в модель.</summary>
            <param name="model">модель, из которой берется время создания элемента</param>
        </member>
        <member name="M:CommonModel.Collections.QueueRecord.#ctor">
            <summary>Конструктор элемента коллекции. Инициализирует ID элемента.</summary>
        </member>
        <member name="P:CommonModel.Collections.QueueRecord.TimeIn">
            <summary>Время добавления элемента в коллекцию</summary>
        </member>
        <member name="P:CommonModel.Collections.QueueRecord.ID">
            <summary>ID элемента</summary>
        </member>
        <member name="P:CommonModel.Collections.QueueRecord.NumberIn">
            <summary>Номер записи в очереди (задается коллекцией при добавлении в нее)</summary>
        </member>
        <member name="T:CommonModel.Collections.SimpleModelList`1">
            <summary>
            Простой модельный список - хранит элементы наследованные от SimpleRecord. При добавлении элемента (методы Add AddRange и Insert) задает у него значение TimeIn и номер элемента (NumberIn), добавленного в коллекцию
            </summary>
        </member>
        <member name="M:CommonModel.Collections.SimpleModelList`1.Add(`0)">
            <summary>
            Добавить элемент в конец списка
            </summary>
            <param name="item">Добавляемый элемент.</param>
        </member>
        <member name="M:CommonModel.Collections.SimpleModelList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Добавить серию(коллекцию) элементов.
            </summary>
            <param name="collection">Коллекция</param>
        </member>
        <member name="M:CommonModel.Collections.SimpleModelList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:CommonModel.Collections.SimpleModelList`1.ResetNumber">
            <summary>Сбросить нумерацию элементов. Следующему добавленному элементу присвоится NumberIn = 0</summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.VarChangedArgs`1">
            <summary>Класс параметров события изменения модельной переменной. Используется для сбора статистики и трассировки.</summary>
            <typeparam name="TDel">Класс "базовой" переменной, по которой ведется сбор статистики. Например: int,double...</typeparam>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.VarChangedArgs`1.currentValue">
            <summary>Текущее значение переменной</summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.VarChangedArgs`1.newValue">
            <summary>Новое значение переменной</summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.VarChangedArgs`1.model">
            <summary>Модель, которой принадлежит переменная</summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.VarChangedArgs`1.Variable">
            <summary>Переменная</summary>
        </member>
        <member name="M:CommonModel.Serialization.ModelSerializer.ModelSaveAsXml(System.Object,System.Type,System.String,System.Type[])">
            <summary>
            Сохранение модели с типами классов СБС в качестве параметра
            </summary>
            <param name="modelToSave"></param>
            <param name="modelType"></param>
            <param name="fileName"></param>
            <param name="eventTypes"></param>
        </member>
        <member name="M:CommonModel.Serialization.ModelSerializer.ModelSaveAsXml(System.Object,System.Type,System.String)">
            <summary>
            Сохранение модели с типами классов СБС заданными в качестве известных типов в самой модели
            </summary>
            <param name="modelToSave"></param>
            <param name="modelType"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:CommonModel.Serialization.ModelSerializer.ModelLoadFromXml(System.String,System.Type)">
            <summary>
            Загрузка модели из Xml-файла
            </summary>
            <param name="fileName">путь к файлу</param>
            <param name="modelType">тип класса модели</param>
            <returns>возвращаемает ссылку на загруженный объект модели</returns>
        </member>
        <member name="T:CommonModel.Kernel.StatDBExport">
            <summary>Класс для экспорта статистики в базу данных</summary>
        </member>
        <member name="F:CommonModel.Kernel.StatDBExport.ConnectionStringBuilder">
            <summary>
            Вспомогательный объект для построения строки подключения. Чтобы найти походящюю строку подключения можно обратиться к www.connectionstrings.com.
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.StatDBExport.DecimalDelimiter">
            <summary>
            Разделитель целой и дробной части числа с плавающей точкой. По умолчанию '.'
            </summary>
            <remarks>Для SqlCe - '.', Для MDB - ','</remarks>
        </member>
        <member name="M:CommonModel.Kernel.StatDBExport.AddCollectorToExport(CommonModel.StatisticsCollecting.StatCollector)">
            <summary>Добавить сборщик в список экспорта. Вместо этого можно экспортировать вест список коллекторов</summary>
            <param name="collector">The collector.</param>
        </member>
        <member name="M:CommonModel.Kernel.StatDBExport.ExportAllModelCollectors(System.Boolean)">
            <summary>
            Экспортирует в базу данных все сборщики модели.
            </summary>
            <param name="withChid">true - включить все сборщики дочерних моделей.</param>
            <returns>
            false - если во время экспорта возникли какие-либо проблемы
            </returns>
        </member>
        <member name="M:CommonModel.Kernel.StatDBExport.Export">
            <summary>
            Экспортирует в базу данных все добавленные вручную пользователем сборщики.
            </summary>
            <returns>false - если во время экспорта возникли какие-либо проблемы</returns>
        </member>
        <member name="P:CommonModel.Kernel.StatDBExport.ModelRef">
            <summary>Модель, в которой искать сборщики статистики</summary>
        </member>
        <member name="P:CommonModel.Kernel.StatDBExport.CommonModelTableName">
            <summary>Имя общей таблицы всех сборщиков.</summary>
        </member>
        <member name="P:CommonModel.Kernel.StatDBExport.TableNameSuffix">
            <summary>Суффикс имен таблиц, для использования при нескольких прогонах. Перед записью в таблицу значений, она очищается.</summary>
        </member>
        <member name="T:CommonModel.Kernel.SBSChangedEventType">
            <summary>
            Enum для классификации типа события, произошедшего с СБС.
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.SBSChangedEventType.ElementAdded">
            <summary>
            Добавлен один элемент
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.SBSChangedEventType.TopElementPoped">
            <summary>
            Из СБС извлечено очередное событие
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.SBSChangedEventType.ElementDeleted">
            <summary>
            Удален один элемент
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.SBSChangedEventType.RangeDelete">
            <summary>
            Несколько элементов удалено.
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.SBSChangedEventArgs">
            <summary>
            Параметры события, произошедшего с СБС.
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.SBSChangedEventArgs.EventType">
            <summary>
            Тип события, произошедшего с СБС.
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.SBSChangedEventArgs.Ev">
            <summary>
            Модельное событие, которое затронуло изменение.
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.SBSChangedDelegate">
            <summary>
            Делегат для события изменения состояния СБС.
            </summary>
            <param name="sender">Источник события.</param>
            <param name="args">Параметры события.</param>
        </member>
        <member name="T:CommonModel.Kernel.SBS">
            <summary>
            Класс для работы со списком будущих событий (СБС).
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.SBS.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализация объекта класс СБС <see cref="T:CommonModel.Kernel.SBS"/>.
            </summary>
            <param name="model">Модель</param>
        </member>
        <member name="M:CommonModel.Kernel.SBS.Add(CommonModel.Kernel.ModelEventArgs)">
            <summary>
            Добавить модельное событие в СБС.
            </summary>
            <param name="mEvent">The m event.</param>
        </member>
        <member name="M:CommonModel.Kernel.SBS.GetEventsByTime(System.Double)">
            <summary>
            Получить модельные события по времени, на которое они запланированы.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.SBS.PopNextEvent">
            <summary>
            Получить очередную запись из СБС.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.SBS.PopNextEqualEvents">
            <summary>
            Если в СБС ближайщее событие имеет время такое же как и следующее, то вернется сразу несколько записей
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.SBS.PickNextEvent">
            <summary>
            Получить очередное событие из СБС не извлекая его из очереди.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.SBS.RemoveEvent(CommonModel.Kernel.ModelEventArgs)">
            <summary>
            Удалить модельное событие из СБС.
            </summary>
            <param name="ev">Модельное событие.</param>
            <remarks>Если такое событие отсутствует в СБС выбросится исключение.</remarks>
        </member>
        <member name="M:CommonModel.Kernel.SBS.RemoveEvents(CommonModel.Kernel.BaseTimeModelEvent)">
            <summary>
            Удалить записи из СБС которые запланированы на событие ev
            </summary>
            <param name="ev">Событие записи о котором надо удалить из СБС.</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.SBS.RemoveEventsByPlanningModel(CommonModel.Kernel.Model)">
            <summary>
            Отменить события, запланированные определенной моделью.
            </summary>
            <param name="planningModel">The planning model.</param>
        </member>
        <member name="M:CommonModel.Kernel.SBS.RemoveEventsByHandlingModel(CommonModel.Kernel.Model)">
            <summary>
            Отменить события, запланированное Для определенной модели.
            </summary>
            <param name="handlingModel">Модкль</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:CommonModel.Kernel.SBS.ClearSBS">
            <summary>
            Очистить СБС
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.SBS.GetSBSCopy">
            <summary>
            Метод возвращает копию СБС. Указатели в возвращаемом списке "смотрят" на те же объекты,
            что и оригинальный список СБС, т.е. изменения объектов списка приведет к изменению поведения модели.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.SBS.GetTrace(CommonModel.Kernel.TraceContext)">
            <summary>
            Получить строку трассировки для данного модельного объекта
            </summary>
            <param name="context">Контекст трассировки</param>
            <returns></returns>
        </member>
        <member name="E:CommonModel.Kernel.SBS.OnSBSChanged">
            <summary>
            Событие возникает при изменении состояния СБС.
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.SBS.Count">
            <summary>
            Число событий в СБС. Возможно использование данного свойства для сбора статистики
            средствами СИМ.
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.SBS.Sorted">
            <summary>
            Флаг того, является ли сбс отсортированным или нет.
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.BaseEventArgsClass.Model">
            <summary>Модель, сгенерировавшая событик</summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelRunArgs.variant">
            <summary>Номер варианте</summary>
        </member>
        <member name="P:CommonModel.Kernel.ModelRunArgs.run">
            <summary>Прогона</summary>
        </member>
        <member name="P:CommonModel.Kernel.EventEventSBSArgs.SBSArgs">
            <summary>Параметры СБС</summary>
        </member>
        <member name="P:CommonModel.Kernel.TimeEventEventArgs.ModelTimeEvent">
            <summary>Временное событие</summary>
        </member>
        <member name="P:CommonModel.Kernel.TimeEventSBSEventArgs.SBSArgs">
            <summary>Параметры СБС</summary>
        </member>
        <member name="P:CommonModel.Kernel.StructEventArgs.StructEvent">
            <summary>структурное событие</summary>
        </member>
        <member name="T:CommonModel.Kernel.CommonEventHandler">
            <summary>
            Делегат для события возникающего с моделью.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:CommonModel.Kernel.ModelRunEventHandler">
            <summary>
            Делегат для события прогона модели.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:CommonModel.Kernel.ModelTimeEventHandler">
            <summary>
            Делегат для событий(.Net) связанных с модельными временными событиями.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:CommonModel.Kernel.TimeEventEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CommonModel.Kernel.ModelTimeSBSEventHandler">
            <summary>
            Делегат для событий(.Net) связанных с модельными временными событиями.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:CommonModel.Kernel.TimeEventSBSEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CommonModel.Kernel.StructEventHandler">
            <summary>
            Делегат для событий(.Net) связанных с модельными Структурными событиями.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:CommonModel.Kernel.StructEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CommonModel.Kernel.EventEventHandler">
            <summary>
            Делегат для событий(.Net) связанных с модельными событиями.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:CommonModel.Kernel.EventEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CommonModel.Kernel.EventEventSBSHandler">
            <summary>
            Делега для событий до и после вызова обработчика.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.DynamicWHistogram">
            <summary>
            Класс, реализующий сбор взвешенной по времени гистограммы с изменяемыми динамически границами
            </summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.DynamicHistogram">
            <summary>
            Гистограмма с изменяемыми пределами
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicHistogram.#ctor(CommonModel.Kernel.IModelInstance,System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.DynamicHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
            <param name="histName">Название гистограммы (можно null)</param>
            <param name="lBound">Левая граница гистограммы</param>
            <param name="rBound">Правая граница гистограммы</param>
            <param name="barCount">Число столбцов гистограммы</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicHistogram.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.DynamicHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicHistogram.SetParams(System.Double,System.Double,System.Int32)">
            <summary>
            Задает параметры гистограммы.
            </summary>
            <param name="lBound">Левая граница гистограммы</param>
            <param name="rBound">Tправая граница гистограммы</param>
            <param name="barCount">Число столбцов гистограммы</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicHistogram.GetParams(System.Double@,System.Double@,System.Int32@)">
            <summary>
            Возвращает параметры гистограммы.
            </summary>
            <param name="lBound">Левая граница гистограммы</param>
            <param name="rBound">Tправая граница гистограммы</param>
            <param name="barCount">Число столбцов гистограммы</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicHistogram.GetColumnI(System.Int32)">
            <summary>
            Ненормированная высота столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicHistogram.ResetCollector">
            <summary>
            Обнуление сборщика (гистограммы)
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicHistogram.GetFrequency(System.Int32)">
            <summary>
            Частота попадания в столбец
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicHistogram.Process(System.Double,System.Double,CommonModel.Kernel.IModelInstance)">
            <summary>
            Обработка нового значения
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <param name="model">The model.</param>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.DynamicHistogram.StartLeftBound">
            <summary>
            Начальное значение левой границы гистограммы
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.DynamicHistogram.StartRightBound">
            <summary>
            Начальное значение Правой границы гистограммы
            </summary>            
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicWHistogram.#ctor(CommonModel.Kernel.IModelInstance,System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.DynamicWHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
            <param name="histName">Название гистограммы (можно null)</param>
            <param name="lBound">Левая граница гистограммы</param>
            <param name="rBound">Правая граница гистограммы</param>
            <param name="barCount">Число столбцов гистограммы</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicWHistogram.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.DynamicWHistogram"/>.
            </summary>
            <param name="model">Модель, которой принадлежит данная гистограмма</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicWHistogram.GetFrequency(System.Int32)">
            <summary>
            Частота попадания в столбец
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicWHistogram.GetColumnI(System.Int32)">
            <summary>
            Ненормированная высота столбца
            </summary>
            <param name="column">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicWHistogram.Process(System.Double,System.Double,CommonModel.Kernel.IModelInstance)">
            <summary>
            Обработка нового значения
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.DynamicWHistogram.ResetCollector">
            <summary>
            Обнуление сборщика (гистограммы)
            </summary>
        </member>
        <member name="T:CommonModel.Collections.CollectionEventType">
            <summary>
            Enum для указания типа события, произошедшего с модельной коллекцией
            </summary>
        </member>
        <member name="F:CommonModel.Collections.CollectionEventType.ElementAdded">
            <summary>
            Добавлен один элемент
            </summary>
        </member>
        <member name="F:CommonModel.Collections.CollectionEventType.RangeAdded">
            <summary>
            Добавлено несколько элементов
            </summary>
        </member>
        <member name="F:CommonModel.Collections.CollectionEventType.ElementDeleted">
            <summary>
            Удален один элемент
            </summary>
        </member>
        <member name="F:CommonModel.Collections.CollectionEventType.RangeDeleted">
            <summary>
            Удалено несколько элементов
            </summary>
        </member>
        <member name="F:CommonModel.Collections.CollectionEventType.ElementSet">
            <summary>
            Задание значения элементу
            </summary>
        </member>
        <member name="F:CommonModel.Collections.CollectionEventType.ElementChanged">
            <summary>
            Изменение значения элемента
            </summary>
        </member>
        <member name="T:CommonModel.Collections.CollectionEventArgs">
            <summary>
            Класс аргументов для передачи в обработчик изменения состояния коллекции.
            При создании пользовательских коллекций, следует не забывать заполнять свойства класса,
            иначе свойства коллекции (например, Count) будут некорректными.
            </summary>
        </member>
        <member name="F:CommonModel.Collections.CollectionEventArgs.Type">
            <summary>
            Тип события, произошедшего с модельной коллекцией.
            </summary>
        </member>
        <member name="F:CommonModel.Collections.CollectionEventArgs.Count">
            <summary>
            Число элементов в коллекции.
            </summary>
        </member>
        <member name="T:CommonModel.Collections.CollectionEventDelegate">
            <summary>
            Делегат для события изменения состояния модельной коллекции.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:CommonModel.Collections.CollectionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CommonModel.RandomStreamProducing.AbstractBaseRandomStream">
            <summary>
            Класс родитель для всех генераторов БПЧ. Чтобы определить свой генаратор БПЧ, необходимо наследовать свой класс от этого.
            </summary>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.AbstractBaseRandomStream.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.AbstractBaseRandomStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.AbstractBaseRandomStream.GenerateValue">
            <summary>
            Сгенерировать новое значение БПЧ.
            </summary>
            <returns>Сгенерированное значение БПЧ.</returns>
        </member>
        <member name="T:CommonModel.RandomStreamProducing.CSharpRandomStream">
            <summary>
            Генератор потока БПЧ. По сути является оберткой для стандартного генератора C#, что и отражено в названии класса.
            </summary>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.CSharpRandomStream.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.CSharpRandomStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.CSharpRandomStream.#ctor(CommonModel.Kernel.IModelInstance,System.Int32)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.CSharpRandomStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="seed">Ядро генератора.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.CSharpRandomStream.GenerateValue">
            <summary>
            Сгенерировать новое значение БПЧ.
            </summary>
            <returns>
            Сгенерированное значение БПЧ.
            </returns>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.CSharpRandomStream.Seed">
            <summary>
            Ядро генератора. Доступно только на запись, из-за специфики реализации класса Random.
            </summary>
        </member>
        <member name="T:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream">
            <summary>
            Генаратор потока БПЧ, использующий алгоритм конгруэнтного датчика.
            </summary>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream.#ctor(CommonModel.Kernel.IModelInstance,System.Int64)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="seed">Ядро генератора.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream.#ctor(CommonModel.Kernel.IModelInstance,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream"/>.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="a">Параметр A. (задайте null для значения по умолчанию).</param>
            <param name="b">Параметр B. (задайте null для значения по умолчанию).</param>
            <param name="m">Параметр M. (задайте null для значения по умолчанию).</param>
            <param name="seed">Ядро. (задайте null для значения по умолчанию).</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream.GenerateValue">
            <summary>
            Сгенерировать новое значение БПЧ.
            </summary>
            <returns>Сгенерированное значение БПЧ.</returns>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream.GenerateSeed">
            <summary>
            Метод задает новое значение ядра генератора случайным образом.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream.GetParams">
            <summary>
            Метод возвращает Словарь, содержащий значения зараметров генератора, ключи(char): a,b,m,s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream.SetParams(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Метод задает параметры генератора. Чтобы оставить текущее значение параметра, задайте null.
            </summary>
            <param name="a">A.</param>
            <param name="b">B.</param>
            <param name="m">M.</param>
            <param name="seed">Ядро.</param>
            <returns></returns>
        </member>
        <member name="P:CommonModel.RandomStreamProducing.GeneratedBaseRandomStream.Seed">
            <summary>
            Ядро генератора.
            </summary>
        </member>
        <member name="T:CommonModel.RandomStreamProducing.FileLoadedBaseRandomStream">
            <summary>
            Генератор потока БПЧ, загружаемый из файла (*.txt).
            </summary>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.FileLoadedBaseRandomStream.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            конструктор класса <see cref="T:CommonModel.RandomStreamProducing.FileLoadedBaseRandomStream"/>. 
            Не инициализирует(не считывает файл потока) поток БПЧ (неоходимо вызвать метод <see cref="M:CommonModel.RandomStreamProducing.FileLoadedBaseRandomStream.InitStream(System.String)"/>).
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.FileLoadedBaseRandomStream.#ctor(CommonModel.Kernel.IModelInstance,System.String)">
            <summary>
            Инициализирует объект класса <see cref="T:CommonModel.RandomStreamProducing.FileLoadedBaseRandomStream"/>. Данный конструктор запускает InitStream.
            </summary>
            <param name="model">Модель, которой принадлежит генератор.</param>
            <param name="fileName">Имя файла, содержащего набор значений БПЧ. Файл должен быть *.txt, каждое новое значение БПЧ должно располагаться на своей строчке и быть в пределах [0,1].</param>
        </member>
        <member name="M:CommonModel.RandomStreamProducing.FileLoadedBaseRandomStream.GenerateValue">
            <summary>
            Сгенерировать новое значение БПЧ. Возвращает очередное значение БПЧ из файла. Если значение не в пределах [0,1], то будет выброшено исключение.
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.IModelInstance">
            <summary>
            Инетерфейс описывает класс, представляющий собой некое подобие модели(в терминах имитационного моделирования).
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.IModelInstance.ModelTime">
            <summary>
            Свойство, возвращающее текущее модельное время.
            </summary>
            <remarks>
            Доступно только на считывание.
            </remarks>
        </member>
        <member name="T:CommonModel.Kernel.TraceDestination">
            <summary>
            Куда выводить трассировку
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.TraceDestination.Console">
            <summary>
            Выводить трассировку в консоль
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.TraceDestination.File">
            <summary>
            Выводить трассировку в файл
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.TraceDestination.Both">
            <summary>
            и в Файл и на Консоль
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.TypeOfTrace">
            <summary>
            Тип трассировки, регламентирует какого рода информация должны быть включена в трассировку
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.TypeOfTrace.StateTrace">
            <summary>
            Трассировка состояния объекта, предполагается вызывать трассировку с этим параметром, например, при изменении модельного времени
            </summary>
        </member>
        <member name="F:CommonModel.Kernel.TypeOfTrace.ChangedTrace">
            <summary>
            Трассировка вызываемая при изменении объекта, предполагается вызывать при изменении состояния объекта. Например изменении модельной переменной
            </summary>
        </member>
        <member name="T:CommonModel.Kernel.TraceContext">
            <summary>
            Экземляр данного класса задает свойства трассировки для модельных объектов
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.TraceContext.#ctor">
            <summary>
            Конструктор экземпляра класса<see cref="T:CommonModel.Kernel.TraceContext"/>, задающего контекст трассировки.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.TraceContext.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.TraceContext.GetClone">
            <summary>
            Получить копию контекста.
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceContext.TraceType">
            <summary>
            Тип трассировка (вывод состояния объекта, вывод информации об изменении объекта)
            </summary>
        </member>
        <member name="P:CommonModel.Kernel.TraceContext.DefaultContext">
            <summary>
            Контекст по умолчанию
            </summary>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.TBoolVar">
            <summary>
            Модельная переменная, инкапсулирующая логическую переменную класса bool.
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.TBoolVar.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Конструктор класса <see cref="T:CommonModel.StatisticsCollecting.TBoolVar"/>.
            </summary>
            <param name="model">Модель, которой принадлежит переменная.</param>
        </member>
        <member name="T:CommonModel.StatisticsCollecting.BoolCollector">
            <summary>
            Класс сборщик статистики по булевским переменным
            </summary>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BoolCollector.#ctor(CommonModel.Kernel.IModelInstance)">
            <summary>
            Инициализирует экземпляр класса <see cref="T:CommonModel.StatisticsCollecting.BoolCollector"/>.
            </summary>
            <param name="model">модель, которой принадлежит сборщик</param>
        </member>
        <member name="M:CommonModel.StatisticsCollecting.BoolCollector.Process(System.Boolean,System.Boolean,CommonModel.Kernel.IModelInstance)">
            <summary>
            Processes the specified current value.
            </summary>
            <param name="currentValue">if set to <c>true</c> [current value].</param>
            <param name="newValue">if set to <c>true</c> [new value].</param>
            <param name="model">The model.</param>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BoolCollector.MaxInterval">
            <summary>
            Максимальный интервал занесения значения
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BoolCollector.MinInterval">
            <summary>
            Минимальный интервал занесения значения
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BoolCollector.TrueFrequency">
            <summary>
            Оценка вероятности нахождения переменной в состоянии true в произвольный момент времени
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BoolCollector.FalseFrequency">
            <summary>
            Оценка вероятности нахождения переменной в состоянии false в произвольный момент времени
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BoolCollector.FullTime">
            <summary>
            Полное время прошедшее с момента начала сбор статистики
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BoolCollector.TrueTime">
            <summary>
            Суммарное время прибывания переменной в состоянии true
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.BoolCollector.FalseTime">
            <summary>
            Суммарное время прибывания переменной в состоянии false
            </summary>
        </member>
        <member name="P:CommonModel.StatisticsCollecting.TimeWeightedMean`1.FullTime">
            <summary>
            Полное время прошедшее с момента начала сбор статистики
            </summary>
        </member>
        <member name="M:CommonModel.Collections.ModelBinaryTree`1.AddLeftChild(`0)">
            <summary>
            Добавить левого потомка узлу.
            </summary>
            <param name="ChildValue">Значение добавляемого узла</param>
        </member>
        <member name="M:CommonModel.Collections.ModelBinaryTree`1.AddRightChild(`0)">
            <summary>
            Добавить правого потомка узлу.
            </summary>
            <param name="ChildValue">Значение добавляемого узла</param>
        </member>
        <member name="M:CommonModel.Collections.ModelBinaryTree`1.DeleteNode(CommonModel.Collections.ModelBinaryTree{`0})">
            <summary>
            Удалить узел(поддерево).
            </summary>
            <param name="Node">Узел(поддерево).</param>
        </member>
        <member name="M:CommonModel.Collections.ModelBinaryTree`1.AddLeftNode(CommonModel.Collections.ModelBinaryTree{`0})">
            <summary>
            Добавить левый сыновий узел(поддерево)
            </summary>
            <param name="Node">Узел(поддерево)</param>
        </member>
        <member name="M:CommonModel.Collections.ModelBinaryTree`1.AddRightNode(CommonModel.Collections.ModelBinaryTree{`0})">
            <summary>
            Добавить правый сыновий узел(поддерево)
            </summary>
            <param name="Node">Узел(поддерево)</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.InitModelObject``1(System.String,System.Object[])">
            <summary>Инициализация модельной переменной. Производит добавление переменной в коллекцию модельных объектов модели. Выставляет в переменной указатель на модель.</summary>
            <typeparam name="TVar">Класс, наследованный от ModelObject</typeparam>
            <param name="name">Имя переменной</param>
            <param name="args">Аргументы конструктора (кроме указателя на модель)</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.InitModelObject``1">
            <summary> Упрощенная инициализация модельного объекта</summary>
            <typeparam name="TVar">Класс, наследованный от ModelObject</typeparam>
        </member>
        <member name="M:CommonModel.Kernel.Model.InitModelObjectArray``1(System.Int32,System.String)">
            <summary>
            Упрощенная инициализация линейного массива модельных объектов.
            </summary>
            <param name="count">число элементов массива</param>
            <param name="namePrefix">Префикс имени модельных объектов массива</param>
            <remarks>Вызывает последовательно метод InitModelObject</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.AddModelObject(CommonModel.Kernel.ModelObject)">
            <summary>Добавить модельный объект в коллекцию модельных объектов модели.</summary>
            <param name="obj">Модельный объект.</param>
            <returns>ID добавленного объекта</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.DeleteModelObject(System.Guid)">
            <summary> Удалить объект из коллекции модельных объектов по ID </summary>        
        </member>
        <member name="M:CommonModel.Kernel.Model.DeleteModelObject(CommonModel.Kernel.ModelObject)">
            <summary> Удалить объект из коллекции модельных объектов по указателю.</summary>
            <param name="mObj">Объект, который удалить.</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetIdByName(System.String)">
            <summary>Возвращает ID объекта по имени </summary>
            <param name="name">Имя объекта</param>
            <returns>Возвращает Guid.Empty если объект не найден.</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetObjectByName(System.String)">
            <summary>Получить модельный объект по имени. </summary>
            <param name="name">Имя объекта.</param>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetObjectByName``1(System.String)">
            <summary>Получить типизированный модельный объект по имени</summary>
            <typeparam name="TVar">Тип модельного объекта</typeparam>
            <param name="name">Имя модельного объекта</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetAllChildModels">
            <summary>Коллекция всех моделей-детей, внуков...</summary>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetObjectsByExactType``1">
            <summary> Получить перечисление объектов зарагестрированных в модели указанного типа(без унаследованных классов - строгое соответствие типа)</summary>
            <typeparam name="TUserObject">Тип</typeparam>
            <returns>Перечисление всех объектов указанного типа зарагестрированых в модели</returns>
            <remarks>Метод не использует кэширование, может повредить производительности</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetObjectsByExactTypeForSubTree``1">
            <summary>Получить перечисление объектов зарагестрированных в модели и ее потомках указанного типа(без унаследованных классов - строгое соответствие типа)</summary>
            <typeparam name="TUserObject">Тип</typeparam>
            <returns>Перечисление всех объектов указанного типа зарагестрированых в модели и ее потомках</returns>
            <remarks>Метод не использует кэширование, может повредить производительности</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetObjectsByType``1">
            <summary>Получить перечисление объектов зарагестрированных в модели указанного типа(C унаследованными классами - нестрогое соответствие типа)</summary>
            <typeparam name="TUserObject">Тип</typeparam>
            <returns>Перечисление всех объектов указанного типа( и наследованных типов) зарагестрированых в модели</returns>
            <remarks>Метод не использует кэширование, может повредить производительности</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetObjectsByType``1(System.Predicate{``0})">
            <summary>Получить перечисление объектов зарагестрированных в модели указанного типа(C унаследованными классами - нестрогое соответствие типа)</summary>
            <typeparam name="TUserObject">Тип</typeparam>
            <param name="which">Условие отбора</param>
            <returns>Перечисление всех объектов указанного типа( и наследованных типов) зарагестрированых в модели</returns>
            <remarks>Метод не использует кэширование, может повредить производительности</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetObjectsByTypeForSubTree``1">
            <summary>Получить перечисление объектов зарагестрированных в модели и ее потомках указанного типа(C унаследованными классами - нестрогое соответствие типа)</summary>
            <typeparam name="TUserObject">Тип</typeparam>
            <returns>Перечисление всех объектов указанного типа(и наследованных типов) зарагестрированых в модели и ее потомках</returns>
            <remarks>Метод не использует кэширование, может повредить производительности</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetObjectsByTypeForSubTree``1(System.Predicate{``0})">
            <summary>
            Получить перечисление объектов зарагестрированных в модели и ее потомках указанного типа(C унаследованными классами - нестрогое соответствие типа)
            </summary>
            <typeparam name="TUserObject">Тип</typeparam>
            <param name="which">условие отбора.</param>
            <returns>Перечисление всех объектов указанного типа(и наследованных типов) зарагестрированых в модели и ее потомках</returns>
            <remarks>Метод не использует кэширование, может повредить производительности</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.AddStructModelEvent(CommonModel.Kernel.BaseStructModelEvent)">
            <summary>Добавить структурное событие в модель.</summary>
            <param name="sModelEvent">структурное событие</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.RemoveStructModelEvent(CommonModel.Kernel.BaseStructModelEvent)">
            <summary>
            Удалить структурное событие у модели.
            </summary>
            <param name="sModelEvent">структурное событие модели</param>
            <returns>false - во время удаления возникло исключение</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetMinimalDeltaTimeForStructEvents">
            <summary>Минимальное время между проверкой условия свершения события из всех структурных событий дерева(поддерева) моделей</summary>
            <returns></returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.SortStructModelEventList">
            <summary>Пересортировка структурных событий модели(только если флаг _structEventsSortNeeded выставлен в true)</summary>
            <returns>Сортировка была необходима и произошла.</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetAllModelsStructEventSortedList">
            <summary>Получить список всех структурных событий дерева осортированных по убыванию приритета</summary>
            <returns>Список отсортированных структурных событий дерева</returns>
            <remarks>Кэширующий метод</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.RecursiveSortStructModelEventList">
            <summary>Сортировка всех списков структурных событий дерева моделей (сортировка списков каждой модели)
            (сортировка в каждой модели вызывается только если взведен флаг _structEventsSortNeeded)</summary>
            <returns>true - Сортировка была необходима и произошла. false - сортировка ничего не изменила.</returns>
        </member>
        <member name="F:CommonModel.Kernel.Model._eventStack">
            <summary>
            Стэк выполняемых событий.
            Нужен для корректного выставления указателей на модели(планирующие) в структурах СБС,
            которые потом передаются вобрабтчики событий.
            Актуальное значение должно быть только у корня модели, так как только там есть СБС.
            </summary>
        </member>
        <member name="M:CommonModel.Kernel.Model._planEventToTime(CommonModel.Kernel.BaseTimeModelEvent,System.Double)">
            <summary>
            Запланировать модельное событие (добавить в СБС)
            </summary>
            <param name="mEvent">Временное событие.</param>
            <param name="time">Модельное время, на которое планируется событие.</param>
            <returns>ModelEventArgs.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Попытка запланировать событие на время меньше текщего модельного времени.</exception>
        </member>
        <member name="M:CommonModel.Kernel.Model.PlanEventToTime(CommonModel.Kernel.BaseTimeModelEvent,System.Double)">
            <summary>
            Запланировать модельное событие (добавить в СБС)
            </summary>
            <param name="mEvent">ВременнОе событие</param>
            <param name="time">Время, на которое запланировано событие</param>
            <returns>Структуру, заненсенную в СБС</returns>
            <remarks>Метод задает объекту события указатель на модельЮ которой он принадлежит. (OwnerModel)</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.PlanEvent(CommonModel.Kernel.BaseTimeModelEvent,System.Double)">
            <summary>
            Запланировать модельное событие(добавить в СБС) через дельта T
            </summary>
            <param name="mEvent">Временное событие.</param>
            <param name="deltaTime">Дельта через, которое должно произойти событие.</param>
            <returns>ModelEventArgs.</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.RunEventHandlerNow(CommonModel.Kernel.ModelEventBaseClass)">
            <summary>
            Безусловный запуск обработки события(временного или структурного).
            На время обработки событие добавляется в стэк событий модели(корневой).
            </summary>
            <param name="mEvent">The m event.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Нельзя использовать один экземпляр временнОго события дважды. Создайте новый экземпляр.</exception>
            <exception cref="T:System.ArgumentNullException">Некорректный указатель на модельное событие (null), которое надо безусловно обработать</exception>
        </member>
        <member name="M:CommonModel.Kernel.Model.CancelEvent(CommonModel.Kernel.ModelEventArgs)">
            <summary>
            Удалить запись из СБС.
            </summary>
            <param name="record">запись в СБС.</param>
            <remarks>Если в СБС оказалось больше одной записи, то удалиться только ближайшая.</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.CancelEvents(CommonModel.Kernel.BaseTimeModelEvent)">
            <summary>
            Удалить из СБС записи ссылающиеся на событие mEvent.
            </summary>
            <param name="mEvent">Временное событие, записи на которое надо удалить из СБС</param>
            <returns> число удаленных записей</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.CancelEventsForPlanningModel(CommonModel.Kernel.Model)">
            <summary>
            Отменить события, запланированные определенной моделью.
            </summary>
            <param name="planningModel">Модель, которая запланировала события в СБС.</param>
            <returns>Число отмененны событий</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.CancelEventsForHandlingModel(CommonModel.Kernel.Model)">
            <summary>
            Отменить события, запланированные Для определенной модели.
            </summary>
            <param name="handlingModel">Модель</param>
            <returns>Число отмененны событий</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.CancelEventsAssociatedWithModel(CommonModel.Kernel.Model)">
            <summary>
            Отменить события, либо запланированные определенной модели, либо запланированные Для нее.
            </summary>
            <param name="model">Моедль</param>
            <returns>Число отмененны событий</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetTrace(CommonModel.Kernel.TraceContext)">
            <summary>Получить строку трассировки для данного модельного объекта</summary>
            <param name="context">Контекст трассировки</param>
            <remarks>Методы Trace используют этот метод для получения строки трассировки</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetSBSTrace(CommonModel.Kernel.TraceContext)">
            <summary>Получить трасировку СБС</summary>
            <param name="context">Контекст трассировки</param>
            <returns>трассировка</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.GetStructTrace(CommonModel.Kernel.TraceContext)">
            <summary>
            Получить трассировку структурных событий модели
            </summary>
            <param name="context">The context.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CommonModel.Kernel.Model.PauseModel">
            <summary>Приостановить выполнение модели. Также смотри <see cref="M:CommonModel.Kernel.Model.ContinueModelPerforme"/>,<see cref="M:CommonModel.Kernel.Model.StopModel(System.Boolean,System.Boolean)"/></summary>
            <exception cref="T:System.InvalidOperationException">Нельзя приостановить модель, которая находится в состоянии:</exception>
        </member>
        <member name="M:CommonModel.Kernel.Model.ContinueModelPerforme">
            <summary>Приостановить выполнение модели. Также смотри <see cref="M:CommonModel.Kernel.Model.PauseModel"/>, <see cref="M:CommonModel.Kernel.Model.StopModel(System.Boolean,System.Boolean)"/></summary>
            <exception cref="T:System.InvalidOperationException">Нельзя продолжит выполнение не приостановленной модели: </exception>
        </member>
        <member name="M:CommonModel.Kernel.Model.StopModel(System.Boolean,System.Boolean)">
            <summary>
            Остановить выполнение модели. Также смотри <see cref="M:CommonModel.Kernel.Model.ContinueModelPerforme"/>,<see cref="M:CommonModel.Kernel.Model.PauseModel"/>
            </summary>
            <param name="fullStop">True - полный останов, false - останов прогона</param>
            <param name="emergency">True - аварийный останов. Влияет на состояние, в которое прийдет модель</param>
            <exception cref="T:System.InvalidOperationException">Нельзя остановить модель, которая не выполняется :</exception>
        </member>
        <member name="M:CommonModel.Kernel.Model.SetNextVariant(System.Int32)">
            <summary>Задание начального состояния модели для нового варианта модели</summary>
            <param name="variantCount">Номер варианта.</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.StartModelling(System.Int32,System.Int32)">
            <summary>Задание начального состояния модлеи</summary>
            <param name="variantCount">Номер варианта модели</param>
            <param name="runCount">Номер прогона модели</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.FinishModelling(System.Int32,System.Int32)">
            <summary>Действия по завершению моделирования прогона (расчет критекриев)</summary>
            <param name="variantCount">Номер варианта модели</param>
            <param name="runCount">Номер прогона модели</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.MustPerformNextVariant(System.Int32)">
            <summary>True - продолжить выполнение ВАРИАНТОВ модели; 
            false - прекратить выполнение вариантов модели. по умолчению false.</summary>
            <param name="variantCount">Номер варианта.</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.MustPerformNextRun(System.Int32,System.Int32)">
            <summary>True - продолжить выполнение ПРОГОНОВ модели;
            false - прекратить выполнение ПРОГОНОВ модели. по умолчению false.</summary>
            <param name="variantCount">Номер варианта</param>
            <param name="runCount">номер прогона.</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.MustStopRun(System.Int32,System.Int32)">
            <summary>Условие завершения прогона модели True - завершить прогон. 
            По умолчанию false.</summary>
            <param name="variantCount">Номер варианта</param>
            <param name="runCount">Номер прогона</param>
        </member>
        <member name="M:CommonModel.Kernel.Model.PERFORM">
            <summary>Запуск модели на исполнение. Метод должен вызываться для корневой</summary>
            <remarks>Запускаются циклы вариантов/прогонов.</remarks>
        </member>
        <member name="M:CommonModel.Kernel.Model._PERFOMRE(System.Boolean)">
            <summary>Запуск модели на исполнение. Метод должен вызываться для корневой</summary>
            <remarks>Запускаются циклы вариантов/прогонов.</remarks>
        </member>
        <member name="P:CommonModel.Kernel.Model.ModelTime">
            <summary>Свойство, возвращающее текущее модельное время.</summary>
        </member>
        <member name="P:CommonModel.Kernel.Model.Parent">
            <summary>Родительская модель.</summary>
        </member>
        <member name="P:CommonModel.Kernel.Model.Root">
            <summary>Корень дерева моделей.</summary>
        </member>
        <member name="P:CommonModel.Kernel.Model.Tracer">
            <summary>Возвращает трассировщик корня дерева моделей.(Нет необходимости вызывать конструктор - если не создан свойсво само вызовет конструктор)</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.BeforeNextVariantInitialize">
            <summary>Событие возникает перед заданием очередного варианта параметров модели.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.BeforeStartModelling">
            <summary>Событие возникает перед прогоном модели.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.AfterEndModelling">
            <summary>Событие возникает после прогона модели.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.AfterVariantRuns">
            <summary>Событие после всех прогонов варианта.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.TimeEventPlaned">
            <summary>Событие возникает при планирование врпеменнОго события в модели.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.TimeEventCanceled">
            <summary>Событие возникает при отмене моедльного события модели.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.StructEventAdded">
            <summary>Событие возникает при добавлении структурного события в модель.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.StructEventDeleted">
            <summary>Событие возникает при удалении структурного события в модель.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.BeforeEventHandlerRuned">
            <summary>Событие возникает при "ручном" запуске обработчика модельного события.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.AfterEventHandlerRuned">
            <summary>Событие возникает при "ручном" запуске обработчика модельного события.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.BeforeEventHandle">
            <summary>Событие возникает перед вызовом обработчика модельного события модели.</summary>
        </member>
        <member name="E:CommonModel.Kernel.Model.AfterEventHandle">
            <summary>Событие возникает после вызова обработчика модельного события модели.</summary>
        </member>
        <member name="P:CommonModel.Kernel.Model.ModelOjects">
            <summary>Коллекция всех объектов модели.</summary>
        </member>
        <member name="P:CommonModel.Kernel.Model.ChildModels">
            <summary>Коллекция моделей-детей.</summary>
        </member>
        <member name="P:CommonModel.Kernel.Model.StructModelEvents">
            <summary>Коллекция структурных событий модели.</summary>
        </member>
        <member name="P:CommonModel.Kernel.Model.RecursiveStructModelEvents">
            <summary>Некэширующее свойство - Коллекция всех структурных событий модели и всех ее дочерних моделей, и всех их дочерних моделей,...</summary>        
        </member>
        <member name="P:CommonModel.Kernel.Model.StructModelEventCount">
            <summary>Колличество структурных событий принадлежащих модели.</summary>
        </member>
        <member name="P:CommonModel.Kernel.Model.RecursiveStructEventCount">
            <summary>Колличество структурных событий принадлежащих модели и всем ее дочерним моделям, их дочерним моделям,...</summary>
            <remarks>Без кэширования значения</remarks>
        </member>
        <member name="P:CommonModel.Kernel.Model.EventStack">
            <summary>
            Стэк модельных событий. Не пустой, только в момен обрабоки событий.
            Внимание! не корректируйте объекты событий, полученные с помощью этого перечисления, возвращаются не копии объектов событий, а сами события
            При необходимости реализуете в своем класса события клонирующий метод и используйте его.
            </summary>
            <value>Стэк модельных событий.</value>
        </member>
        <member name="P:CommonModel.Kernel.Model.ModelState">
            <summary>Состояние модели.</summary>
        </member>
        <member name="T:CommonModel.Kernel.ModelStateEnum">
            <summary>Состояние модели</summary>
        </member>
        <member name="F:CommonModel.Kernel.ModelStateEnum.Run">
            <summary>Выполняется</summary>
        </member>
        <member name="F:CommonModel.Kernel.ModelStateEnum.Paused">
            <summary>Приостановлена</summary>
        </member>
        <member name="F:CommonModel.Kernel.ModelStateEnum.Stopped">
            <summary>Остановлена</summary>
        </member>
        <member name="F:CommonModel.Kernel.ModelStateEnum.EmergencyStopped">
            <summary>Остановлена аварийно.</summary>
        </member>
        <member name="F:CommonModel.Kernel.ModelStateEnum.Undefined">
            <summary>Неопределено</summary>
        </member>
    </members>
</doc>
